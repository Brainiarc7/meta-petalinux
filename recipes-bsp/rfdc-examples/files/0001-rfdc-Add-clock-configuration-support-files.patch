From cb388309dd442c3f5a5a5c08ca6766ca54cb6384 Mon Sep 17 00:00:00 2001
From: Sai Krishna Potthuri <lakshmis@xilinx.com>
Date: Wed, 11 Apr 2018 18:58:22 +0530
Subject: [EMBEDDEDSW PATCH] rfdc: Add clock configuration support files

This patch adds clock configuration support files and update the
examples and Makefile accordingly.
Update the example to call the clock configuration APIs.
Update the Makefile to compile clock configuration files.

Signed-off-by: Sai Krishna Potthuri <lakshmis@xilinx.com>
---
 .../Makefile.Linux           |   7 +-
 .../xrfdc_caher_clk.c        | 863 +++++++++++++++++++++
 .../xrfdc_caher_clk.h        |  39 +
 .../xrfdc_intr_example.c     |   6 +
 .../xrfdc_read_write_example.c       |   5 +
 .../xrfdc_selftest_example.c |   5 +
 6 files changed, 923 insertions(+), 2 deletions(-)
 create mode 100644 xrfdc_caher_clk.c
 create mode 100644 xrfdc_caher_clk.h

diff --git a/Makefile.Linux b/Makefile.Linux
index efeb54f..6f0c256 100644
--- a/Makefile.Linux
+++ b/Makefile.Linux
@@ -10,12 +10,15 @@ APP = rfdc-test
 LIBSOURCES=*.c
 OUTS =
 RFDC_OBJS =
+INCLUDES = xrfdc_caher_clk.h
+OBJS = xrfdc_caher_clk.o
+BOARD_FLAG =
 
 %.o: %.c
-	$(CC) ${LDFLAGS} ${CFLAGS} -c $(LIBSOURCES)
+	$(CC) ${LDFLAGS} ${BOARD_FLAG} ${CFLAGS} -c $(LIBSOURCES)
 
 all: $(RFDC_OBJS)
-	$(CC) ${LDFLAGS} $(RFDC_OBJS) -o $(OUTS) -lrfdc -lmetal
+	$(CC) ${LDFLAGS} $(RFDC_OBJS) $(OBJS) $(INCLUDES) -o $(OUTS) -lrfdc -lmetal
 
 clean:
 	rm -rf $(OUTS) *.o
diff --git a/xrfdc_caher_clk.c b/xrfdc_caher_clk.c
new file mode 100644
index 0000000..345f187
--- /dev/null
+++ b/xrfdc_caher_clk.c
@@ -0,0 +1,863 @@
+/******************************************************************************
+*
+* Copyright (C) 2018 Xilinx, Inc.  All rights reserved.
+*
+* Permission is hereby granted, free of charge, to any person obtaining a copy
+* of this software and associated documentation files (the "Software"), to deal
+* in the Software without restriction, including without limitation the rights
+* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+* copies of the Software, and to permit persons to whom the Software is
+* furnished to do so, subject to the following conditions:
+*
+* The above copyright notice and this permission notice shall be included in
+* all copies or substantial portions of the Software.
+*
+* Use of the Software is limited solely to applications:
+* (a) running on a Xilinx device, or
+* (b) that interact with a Xilinx device through a bus or interconnect.
+*
+* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
+* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+* SOFTWARE.
+*
+* Except as contained in this notice, the name of the Xilinx shall not be used
+* in advertising or otherwise to promote the sale, use or other dealings in
+* this Software without prior written authorization from Xilinx.
+*
+******************************************************************************/
+/****************************************************************************/
+/**
+*
+* @file xrfdc_caher_clk.c
+*
+* This file contains a selftest example for using the lmx2594 and lmk04028
+* clock generator.
+* This example configures the lmx2594  to 20 frequencies. If 0 is passed 
+* then the chip is powered down.
+*
+* <pre>
+*
+* MODIFICATION HISTORY:
+*
+* Ver   Who    Date     Changes
+* ----- -----  -------- -----------------------------------------------------
+* 1.0   sd     04/11/18 First release
+*
+* </pre>
+*
+*****************************************************************************/
+
+/***************************** Include Files ********************************/
+#ifdef XPS_BOARD_ZCU111
+
+#ifndef __BAREMETAL__
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <limits.h>
+#include <dirent.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/param.h>
+#include <sys/ioctl.h>
+
+#define I2C_SLAVE_FORCE	0x0706
+#define XIIC_BLOCK_MAX	16	/* Max data length */
+#define I2C_SMBUS_WRITE	0
+#define I2C_SMBUS_I2C_BLOCK  6
+#define I2C_SMBUS	0x0720	/* SMBus transfer */
+
+union XRfdc_i2c_smbus_data {
+	unsigned char byte;
+	unsigned short word;
+	unsigned char block[XIIC_BLOCK_MAX]; 
+};
+
+struct XRfdc_i2c_smbus_ioctl_data {
+	unsigned char read_write;
+	unsigned char command;
+	unsigned int size;
+	union XRfdc_i2c_smbus_data *data;
+};
+
+static inline void IicWriteData(int XIicDevFile, unsigned char command,
+                                                   unsigned char length,
+                                                   const unsigned char *values)
+{
+	union XRfdc_i2c_smbus_data data;
+	struct XRfdc_i2c_smbus_ioctl_data args;
+	int Index;
+	for (Index = 1; Index <= length; Index++)
+		data.block[Index] = values[Index-1];
+	data.block[0] = length;
+	args.read_write = I2C_SMBUS_WRITE;
+	args.command = command;
+	args.size = I2C_SMBUS_I2C_BLOCK;
+	args.data = &data;
+	ioctl(XIicDevFile,I2C_SMBUS,&args);
+}
+#else
+#include "xparameters.h"
+#include "xuartps.h"
+#include "xiicps.h"
+#include "xil_printf.h"
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+XIicPs Iic; /* Instance of the IIC Device */
+XIicPs Iic0; /* Instance of the IIC Device */
+
+#endif
+#include "xrfdc_caher_clk.h"
+
+
+
+#define LMK04208_count 26
+#define LMX2592_A_count 113
+typedef struct {
+	int XFrequency;
+	unsigned int LMX2592_A[LMX2592_A_count];
+} XCaherLmx;
+
+XCaherLmx CaherLmx[LMX2592_A_count] = { 
+		{ 3923160, 7340032, 7274496, 7208960, 7143424, 7077888,
+		7012352, 6946816, 6881313, 6815744, 6750208, 6700928, 6619153, 6553600,
+		6488064, 6423040, 6359176, 6291456, 6225920, 6160384, 6094848, 6029312,
+		5963776, 5898240, 5832704, 5767168, 5701632, 5636096, 5624576, 5505025,
+		5439488, 5381632, 5308416, 5269094, 5177382, 5111811, 5046272, 4980748,
+		4917248, 4849664, 4784191, 4718593, 4653185, 4637520, 4521984, 4457448,
+		4390912, 4325876, 4259840, 4199304, 4128768, 4064034, 3997864, 3932160,
+		3866625, 3833857, 3735584, 3670016, 3604480, 3538944, 3473408, 3409952,
+		3342464, 3276800, 3228032, 3146496, 3080960, 3016700, 2998476, 2886691,
+		2818048, 2752512, 2686976, 2621440, 2555905, 2490368, 2425604, 2359360,
+		2293764, 2228224, 2170401, 2098067, 2049004, 1978764, 1913228, 1836168,
+		1769474, 1707440, 1639972, 1574682, 1507452, 1441793, 1377281, 1368136,
+		1255351, 1179748, 1114412, 1048704, 984655, 925264, 868352, 806913,
+		720920, 659672, 591364, 532480, 475314, 444418, 327880, 264771, 198210,
+		132352, 67592, 9372 },
+		//1.474 GHz
+		{ 1474560 ,7340032, 7274496, 7208960, 7143424, 7077888,
+		7012352, 6946816, 6881313, 6815744, 6750208, 6700928, 6619153, 6553600,
+		6488064, 6423040, 6359176, 6291456, 6225920, 6160384, 6094848, 6029312,
+		5963776, 5898240, 5832704, 5767168, 5701632, 5636096, 5624576, 5505025,
+		5439488, 5381632, 5308416, 5269094, 5177382, 5111811, 5046272, 4980748,
+		4917376, 4849664, 4784191, 4718593, 4653185, 4637520, 4521984, 4457448,
+		4390912, 4325876, 4259840, 4199304, 4128768, 4064034, 3997864, 3932160,
+		3866625, 3833857, 3735584, 3670016, 3604480, 3538944, 3473408, 3409952,
+		3342464, 3276800, 3228032, 3146496, 3080960, 3016700, 2998476, 2886819,
+		2818048, 2752512, 2686976, 2621440, 2555905, 2490368, 2425604, 2359368,
+		2293764, 2228224, 2170401, 2098067, 2049004, 1978764, 1913228, 1836168,
+		1769474, 1707440, 1639972, 1574682, 1507452, 1441793, 1377281, 1368136,
+		1255351, 1179748, 1114412, 1048704, 984655, 925264, 868352, 806913,
+		720920, 659672, 591364, 532480, 475314, 444418, 327880, 264771, 198210,
+		132352, 67592, 9372 },
+		//6.5536 GHz
+		{ 6553600, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+		6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+		6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+		5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+		5269094, 5177382, 5111811, 5046272, 4980748, 4917248, 4849664, 4784191,
+		4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+		4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+		3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+		3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2768896, 2686976,
+		2621440, 2555905, 2514944, 2425860, 2359402, 2293764, 2228224, 2170401,
+		2098067, 2032620, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+		1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+		1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+		475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 },
+		//6.400G
+		{ 6400000, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+		6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+		6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+		5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+		5269094, 5177382, 5111811, 5046272, 4980748, 4917248, 4849664, 4784191,
+		4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+		4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+		3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+		3146496, 3080960, 3016700, 2998476, 2886691, 2818049, 2752512, 2686976,
+		2621440, 2555910, 2490368, 2425860, 2359400, 2293764, 2228224, 2170401,
+		2098067, 2032620, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+		1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+		1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+		475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 },
+//6.38976G
+{ 6389760, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917248, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512, 2686976,
+2621440, 2555905, 2490368, 2425860, 2359400, 2293764, 2228224, 2170401,
+2098067, 2032620, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 },
+
+//6.144M
+{6144000, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917248, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512, 2686976,
+2621440, 2555905, 2490368, 2425860, 2359396, 2293764, 2228224, 2170401,
+2098067, 2032620, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 },
+//5.89824 G
+{ 5898240, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917248, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512, 2686976,
+2621440, 2555905, 2490368, 2425860, 2359392, 2293764, 2228224, 2170401,
+2098067, 2032620, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 },
+//5734400 K
+{5734400, 340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917248, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818049, 2752512, 2686976,
+2621440, 2555907, 2490368, 2425860, 2359389, 2293764, 2228224, 2170401,
+2098067, 2032620, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 }, 
+//4000000 K
+{ 4000000, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917248, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818053, 2752512, 2686976,
+2621440, 2555952, 2490368, 2425604, 2359361, 2293764, 2228224, 2170401,
+2098067, 2032620, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 }, 
+//4096000 K
+{4096000, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917248, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818050, 2752512, 2686976,
+2621440, 2555907, 2490368, 2425604, 2359362, 2293764, 2228224, 2170401,
+2098067, 2032620, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 }, 
+//4423680 K
+{ 44236800, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917248, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512, 2686976,
+2621440, 2555905, 2490368, 2425604, 2359368, 2293764, 2228224, 2170401,
+2098067, 2032620, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 },
+//4669440
+{4669440, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917248, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512, 2686976,
+2621440, 2555905, 2490368, 2425604, 2359372, 2293764, 2228224, 2170401,
+2098067, 2032620, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 }, 
+{ 1966080, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816,
+6881313, 6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040,
+6359176, 6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240,
+5832704, 5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632,
+5308416, 5269094, 5177382, 5111811, 5046272, 4980748, 4917312, 4849664,
+4784191, 4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876,
+4259840, 4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857,
+3735584, 3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800,
+3228032, 3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512,
+2686976, 2621440, 2555905, 2490368, 2425604, 2359360, 2293764, 2228224,
+2170401, 2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440,
+1639972, 1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748,
+1114412, 1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364,
+532480, 475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 }, 
+{2048000, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816,
+6881313, 6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040,
+6359176, 6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240,
+5832704, 5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632,
+5308416, 5269094, 5177382, 5111811, 5046272, 4980748, 4917312, 4849664,
+4784191, 4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876,
+4259840, 4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857,
+3735584, 3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800,
+3228032, 3146496, 3080960, 3016700, 2998476, 2886691, 2818050, 2752512,
+2686976, 2621440, 2555907, 2490368, 2425604, 2359362, 2293764, 2228224,
+2170401, 2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440,
+1639972, 1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748,
+1114412, 1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364,
+532480, 475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 },
+{ 2457600, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816,
+6881313, 6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040,
+6359176, 6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240,
+5832704, 5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632,
+5308416, 5269094, 5177382, 5111811, 5046272, 4980748, 4917312, 4849664,
+4784191, 4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876,
+4259840, 4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857,
+3735584, 3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800,
+3228032, 3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512,
+2686976, 2621440, 2555905, 2490368, 2425604, 2359376, 2293764, 2228224,
+2170401, 2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440,
+1639972, 1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748,
+1114412, 1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364,
+532480, 475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372}, 
+{ 2949120, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816,
+6881313, 6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040,
+6359176, 6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240,
+5832704, 5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632,
+5308416, 5269094, 5177382, 5111811, 5046272, 4980748, 4917312, 4849664,
+4784191, 4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876,
+4259840, 4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857,
+3735584, 3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800,
+3228032, 3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512,
+2686976, 2621440, 2555905, 2490368, 2425860, 2359392, 2293764, 2228224,
+2170401, 2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440,
+1639972, 1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748,
+1114412, 1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364,
+532480, 475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372},
+{3072000, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917312, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512, 2686976,
+2621440, 2555905, 2490368, 2425860, 2359396, 2293764, 2228224, 2170401,
+2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372}, 
+{3276800, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917312, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818050, 2752512, 2686976,
+2621440, 2555907, 2490368, 2425860, 2359402, 2293764, 2228224, 2170401,
+2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 }, 
+ { 3686400, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816, 6881313,
+6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040, 6359176,
+6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240, 5832704,
+5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632, 5308416,
+5269094, 5177382, 5111811, 5046272, 4980748, 4917312, 4849664, 4784191,
+4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876, 4259840,
+4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857, 3735584,
+3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800, 3228032,
+3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512, 2686976,
+2621440, 2555905, 2490368, 2425860, 2359416, 2293764, 2228224, 2170401,
+2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440, 1639972,
+1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748, 1114412,
+1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364, 532480,
+475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 }, 
+{ 204800, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816,
+6881313, 6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040,
+6359176, 6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240,
+5832704, 5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632,
+5308416, 5269094, 5177382, 5111811, 5046272, 4980748, 4917760, 4849664,
+4784191, 4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876,
+4259840, 4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857,
+3735584, 3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800,
+3228032, 3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512,
+2686976, 2621440, 2555905, 2490368, 2425604, 2359376, 2293764, 2228224,
+2170401, 2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440,
+1639972, 1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748,
+1114412, 1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364,
+532480, 475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372}, 
+{409600, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816,
+6881313, 6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040,
+6359176, 6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240,
+5832704, 5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632,
+5308416, 5269094, 5177382, 5111811, 5046272, 4980748, 4917632, 4849664,
+4784191, 4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876,
+4259840, 4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857,
+3735584, 3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800,
+3228032, 3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512,
+2686976, 2621440, 2555905, 2490368, 2425604, 2359376, 2293764, 2228224,
+2170401, 2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440,
+1639972, 1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748,
+1114412, 1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364,
+532480, 475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 }, 
+{491520, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816,
+6881313, 6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040,
+6359176, 6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240,
+5832704, 5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632,
+5308416, 5269094, 5177382, 5111811, 5046272, 4980748, 4917568, 4849664,
+4784191, 4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876,
+4259840, 4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857,
+3735584, 3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800,
+3228032, 3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512,
+2686976, 2621440, 2555905, 2490368, 2425604, 2359360, 2293764, 2228224,
+2170401, 2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440,
+1639972, 1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748,
+1114412, 1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364,
+532480, 475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372 },
+{737280, 7340032, 7274496, 7208960, 7143424, 7077888, 7012352, 6946816,
+6881313, 6815744, 6750208, 6700928, 6619153, 6553600, 6488064, 6423040,
+6359176, 6291456, 6225920, 6160384, 6094848, 6029312, 5963776, 5898240,
+5832704, 5767168, 5701632, 5636096, 5624576, 5505025, 5439488, 5381632,
+5308416, 5269094, 5177382, 5111811, 5046272, 4980748, 4917504, 4849664,
+4784191, 4718593, 4653185, 4637520, 4521984, 4457448, 4390912, 4325876,
+4259840, 4199304, 4128768, 4064034, 3997864, 3932160, 3866625, 3833857,
+3735584, 3670016, 3604480, 3538944, 3473408, 3409952, 3342464, 3276800,
+3228032, 3146496, 3080960, 3016700, 2998476, 2886691, 2818048, 2752512,
+2686976, 2621440, 2555905, 2490368, 2425604, 2359368, 2293764, 2228224,
+2170401, 2098067, 2049004, 1978764, 1913228, 1836168, 1769474, 1707440,
+1639972, 1574682, 1507452, 1441793, 1377281, 1368136, 1255351, 1179748,
+1114412, 1048704, 984655, 925296, 868352, 806913, 720920, 659672, 591364,
+532480, 475314, 444418, 327880, 264771, 198210, 132352, 67592, 9372}, 
+};
+
+unsigned int LMK04208_CKin[1][26] = {{ 1441856, 2148795168, 2148795169, 2148795170,
+		3222536227, 1075052580, 2148802053, 53477382, 19922951, 100728840,
+		1431655753, 2432844042, 67178507, 453771372, 587367021, 33554446,
+		2147516431, 3243574288, 88, 46777369, 2410151962, 268443163, 2170908,
+		25166653, 33555262, 4128799 }};
+#ifndef __BAREMETAL__
+
+static void Lmx2594Updatei2c(int XIicDevFile,unsigned int  r[LMX2592_A_count])
+{
+	int i=0;
+	int val;
+	unsigned char tx_array[3];
+/*
+ * 1. Apply power to device.
+ * 2. Program RESET = 1 to reset registers.
+ * 3. Program RESET = 0 to remove reset.
+ * 4. Program registers as shown in the register map in REVERSE order from highest to lowest.
+ * 5. Program register R0 one additional time with FCAL_EN = 1 to ensure that the VCO calibration runs from a
+ * stable state.
+ */
+		val = 0x2;
+		tx_array[2] = (unsigned char) val & (0xFF);
+		tx_array[1] = (unsigned char) val & (0xFF);
+		tx_array[0] = (unsigned char) (val >> 16) & (0xFF);
+		val = tx_array[0] | (tx_array[1] << 8) | (tx_array[2] << 16 ) ;
+		IicWriteData(XIicDevFile, 0xd, 3, tx_array);
+		usleep(100000);
+		val = 0x0;
+		tx_array[2] = (unsigned char) val & (0xFF);
+		tx_array[1] = (unsigned char) val & (0xFF);
+		tx_array[0] = (unsigned char) (val >> 16) & (0xFF);
+		val = tx_array[0] | (tx_array[1] << 8) | (tx_array[2] << 16 ) ;
+		IicWriteData(XIicDevFile, 0xd, 3, tx_array);
+		usleep(100000);
+	for (i = 0; i < LMX2592_A_count; i++) {
+		tx_array[2] = (unsigned char) (r[i]) & (0xFF);
+		tx_array[1] = (unsigned char) (r[i] >> 8) & (0xFF);
+		tx_array[0] = (unsigned char) (r[i] >> 16) & (0xFF);
+		val = tx_array[0] | (tx_array[1] << 8) | (tx_array[2] << 16 ) ;
+		IicWriteData(XIicDevFile, 0xd, 3, tx_array);
+		usleep(100000);
+	}
+	/* FCAL_EN = 1 */
+		tx_array[2] = (unsigned char) (r[112]) & (0xFF);
+		tx_array[1] = (unsigned char) (r[112] >> 8) & (0xFF);
+		tx_array[0] = (unsigned char) (r[112] >> 16) & (0xFF);
+		val = tx_array[0] | (tx_array[1] << 8) | (tx_array[2] << 16 ) ;
+		fprintf(stderr, "LMX configured \n");
+		IicWriteData(XIicDevFile, 0xd, 3, tx_array);
+}
+static int Lmx2594UpdateFreq(int XIicDevFile,int  XFrequency)
+{
+	int i=0;
+	int val;
+	unsigned char tx_array[10];
+	int freq_index=0;
+	if (XFrequency == 0) {
+		val = 0x3;
+		tx_array[2] = (unsigned char) val & (0xFF);
+		tx_array[1] = (unsigned char) val & (0xFF);
+		tx_array[0] = (unsigned char) (val >> 16) & (0xFF);
+
+		IicWriteData(XIicDevFile, 0xd, 3, tx_array);
+		return 0;
+	}
+	for(i=0 ; i<20; i++) {
+		if (CaherLmx[i].XFrequency == XFrequency) {
+			fprintf(stderr, "LMX configured to freq %d index %d\n", XFrequency, i);
+			Lmx2594Updatei2c( XIicDevFile, CaherLmx[i].LMX2592_A);
+			return 0;
+		}
+	}
+
+	fprintf(stderr, "configuring default Frequency\n");
+	Lmx2594Updatei2c( XIicDevFile, CaherLmx[0].LMX2592_A);
+	return 0;
+}
+static int Lmk4028UpdateFreq(int XIicDevFile)
+{
+	int i;
+	unsigned char tx_array[10];
+	for (i = 0; i < LMK04208_count; i++) {
+		tx_array[3] = (unsigned char) (LMK04208_CKin[0][i]) & (0xFF);
+		tx_array[2] = (unsigned char) (LMK04208_CKin[0][i] >> 8) & (0xFF);
+		tx_array[1] = (unsigned char) (LMK04208_CKin[0][i] >> 16) & (0xFF);
+		tx_array[0] = (unsigned char) (LMK04208_CKin[0][i] >> 24) & (0xFF);
+		IicWriteData(XIicDevFile, 2, 4, tx_array);
+		usleep(1000);
+	}
+	return 0;
+}
+#endif
+
+void CaherClkApi(int XIicBus, int XFrequency)
+{
+#ifdef __BAREMETAL__
+	XIicPs_Config *Config_iic;
+	XIicPs_Config *Config_iic0;
+	int Status;
+	u8 tx_array[10];
+	u8 rx_array[10];
+	u32 ClkRate = 100000;
+	int i;
+	int freq_index=0;
+
+
+	for(i=0 ; i<20; i++) {
+		if (CaherLmx[i].XFrequency == XFrequency) {
+			freq_index =i;
+			fprintf(stderr, "LMX configured to freq %d index %d\n", XFrequency, i);
+		}
+	}
+
+	xil_printf("IIC configurattion start\r\n");
+
+	Config_iic0 = XIicPs_LookupConfig(0); //Default set to 0
+	if (NULL == Config_iic0) {
+		return XST_FAILURE;
+	}
+
+	Status = XIicPs_CfgInitialize(&Iic0, Config_iic0, Config_iic0->BaseAddress);
+	if (Status != XST_SUCCESS) {
+		return XST_FAILURE;
+	}
+
+	Status = XIicPs_SetSClk(&Iic0, ClkRate);
+	if (Status != XST_SUCCESS) {
+		return XST_FAILURE;
+	}
+
+	Config_iic = XIicPs_LookupConfig(1); //Default set to 1
+	if (NULL == Config_iic) {
+		return XST_FAILURE;
+	}
+
+	Status = XIicPs_CfgInitialize(&Iic, Config_iic, Config_iic->BaseAddress);
+	if (Status != XST_SUCCESS) {
+		return XST_FAILURE;
+	}
+
+	Status = XIicPs_SetSClk(&Iic, ClkRate);
+	if (Status != XST_SUCCESS) {
+		return XST_FAILURE;
+	}
+
+	tx_array[0] = 0x06;	//0x06;		//Configure IO expander output  pins
+	tx_array[1] = 0xDF;	//0x02;		//~0x02-enables I2C1 MUX select
+	tx_array[2] = 0xFF;	//0x02;		//~0x02-enables I2C1 MUX select
+	XIicPs_MasterSendPolled(&Iic0, tx_array, 0x03, 0x20);//I2C Mux slave address
+	while (XIicPs_BusIsBusy(&Iic0))
+		;
+	usleep(25000);
+	xil_printf("I2c0 write done\r\n");
+
+	tx_array[0] = 0x06;	//0x06;		//Configure IO expander output  pins
+	XIicPs_MasterSendPolled(&Iic0, tx_array, 0x01, 0x20);//I2C Mux slave address
+	while (XIicPs_BusIsBusy(&Iic0))
+		;
+	usleep(25000);
+
+	/*
+ * 	 * Receive the Data.
+ * 	 	 */
+	Status = XIicPs_MasterRecvPolled(&Iic0, rx_array, 2, 0x20);
+	if (Status != XST_SUCCESS) {
+		return XST_FAILURE;
+	}
+
+	/*
+ * 	 * Wait until bus is idle to start another transfer.
+ * 	 	 */
+	while (XIicPs_BusIsBusy(&Iic0))
+		;
+
+	xil_printf("Data0 0x%x\r\n", rx_array[0]);
+	xil_printf("Data1 0x%x\r\n", rx_array[1]);
+
+	tx_array[0] = 0x20;	//0x02;		//0x02-enable Super clock module 0x20- analog I2C power module slaves
+	XIicPs_MasterSendPolled(&Iic, tx_array, 0x01, 0x74);//I2C Mux slave address
+	while (XIicPs_BusIsBusy(&Iic))
+		;
+	usleep(25000);
+
+	xil_printf("I2c1 I2C MUX enable write done\r\n");
+
+	/*
+ * 	 * Receive the Data.
+ * 	 	 */
+	Status = XIicPs_MasterRecvPolled(&Iic, rx_array, 1, 0x74);
+	if (Status != XST_SUCCESS) {
+		return XST_FAILURE;
+	}
+
+	/*
+ * 	 * Wait until bus is idle to start another transfer.
+ * 	 	 */
+	while (XIicPs_BusIsBusy(&Iic))
+		;
+
+	xil_printf("Data0 0x%x\r\n", rx_array[0]);
+
+	tx_array[0] = 0xF0;		//function ID
+	tx_array[1] = 0x02;
+	XIicPs_MasterSendPolled(&Iic, tx_array, 0x02, 0x2F);//I2C-SPI bridgde slave address
+	while (XIicPs_BusIsBusy(&Iic))
+		;
+	usleep(25000);
+
+	xil_printf("I2c1 I2CTOSPI config write done\r\n");
+	/*
+ * 	 * Receive the Data.
+ * 	 	 */
+	Status = XIicPs_MasterRecvPolled(&Iic, rx_array,
+			2, 0x2F);
+	if (Status != XST_SUCCESS) {
+		return XST_FAILURE;
+	}
+
+	/*
+ * 	 * Wait until bus is idle to start another transfer.
+ * 	 	 */
+	while (XIicPs_BusIsBusy(&Iic));
+
+	xil_printf("Data0 0x%x\r\n", rx_array[0]);
+	xil_printf("Data1 0x%x\r\n", rx_array[1]);
+
+
+	for (i = 0; i < LMK04208_count; i++) {
+		tx_array[0] = 0x02;		//
+		tx_array[4] = (u8) (LMK04208_CKin[0][i]) & (0xFF);
+		tx_array[3] = (u8) (LMK04208_CKin[0][i] >> 8) & (0xFF);
+		tx_array[2] = (u8) (LMK04208_CKin[0][i] >> 16) & (0xFF);
+		tx_array[1] = (u8) (LMK04208_CKin[0][i] >> 24) & (0xFF);
+		Status = XIicPs_MasterSendPolled(&Iic, tx_array, 0x05, 0x2F);//I2C-SPI bridge slave address
+		usleep(25000);
+		while (XIicPs_BusIsBusy(&Iic))
+			;
+
+	}
+
+	sleep(2);
+
+	xil_printf("I2c1 I2CTOSPI LMK04208 config write done\r\n");
+
+	tx_array[0]=0x08;
+	tx_array[3]=(u8) (0x00);
+	tx_array[2]=(u8) (0x00);
+	tx_array[1]=(u8) (0x20);
+	Status = XIicPs_MasterSendPolled(&Iic,tx_array,0x04,0x2F);//I2C-SPI bridge slave address
+	while (XIicPs_BusIsBusy(&Iic));
+
+	sleep(2);
+
+	tx_array[0]=0x08;
+	tx_array[3]=(u8) (0x00);
+	tx_array[2]=(u8) (0x00);
+	tx_array[1]=(u8) (0x00);
+	Status = XIicPs_MasterSendPolled(&Iic,tx_array,0x04,0x2F);//I2C-SPI bridge slave address
+	while (XIicPs_BusIsBusy(&Iic));
+
+	sleep(2);
+	for (i = 0; i < LMX2592_A_count; i++) {
+		xil_printf("loop %d  frequency index %d\r\n",i, freq_index);
+		tx_array[0] = 0x08;		//
+		tx_array[3] = (u8) (CaherLmx[freq_index].LMX2592_A[i]) & (0xFF);
+		tx_array[2] = (u8) (CaherLmx[freq_index].LMX2592_A[i] >> 8) & (0xFF);
+		tx_array[1] = (u8) (CaherLmx[freq_index].LMX2592_A[i] >> 16) & (0xFF);
+		Status = XIicPs_MasterSendPolled(&Iic, tx_array, 0x04, 0x2F);//I2C-SPI bridge slave address
+		while (XIicPs_BusIsBusy(&Iic))
+			;
+		usleep(25000);
+
+	}
+	for (i = 0; i < LMX2592_A_count; i++) {
+		tx_array[0] = 0x08;		//
+		tx_array[3] = (u8) (CaherLmx[freq_index].LMX2592_A[i]) & (0xFF);
+		tx_array[2] = (u8) (CaherLmx[freq_index].LMX2592_A[i] >> 8) & (0xFF);
+		tx_array[1] = (u8) (CaherLmx[freq_index].LMX2592_A[i] >> 16) & (0xFF);
+		Status = XIicPs_MasterSendPolled(&Iic, tx_array, 0x04, 0x2F);//I2C-SPI bridge slave address
+		while (XIicPs_BusIsBusy(&Iic))
+			;
+		usleep(25000);
+
+	}
+
+
+#if 1
+	tx_array[0]=0x04;
+	tx_array[3]=(u8) (0x00);
+	tx_array[2]=(u8) (0x00);
+	tx_array[1]=(u8) (0x02);
+	Status = XIicPs_MasterSendPolled(&Iic,tx_array,0x04,0x2F);//I2C-SPI bridge slave address
+	while (XIicPs_BusIsBusy(&Iic));
+
+	sleep(2);
+	tx_array[0]=0x04;
+	tx_array[3]=(u8) (0x00);
+	tx_array[2]=(u8) (0x00);
+	tx_array[1]=(u8) (0x00);
+	Status = XIicPs_MasterSendPolled(&Iic,tx_array,0x04,0x2F);//I2C-SPI bridge slave address
+	while (XIicPs_BusIsBusy(&Iic));
+
+	sleep(2);
+#endif
+	for (i = 0; i < LMX2592_A_count; i++) {
+		tx_array[0] = 0x04;		//
+		tx_array[3] = (u8) (CaherLmx[freq_index].LMX2592_A[i]) & (0xFF);
+		tx_array[2] = (u8) (CaherLmx[freq_index].LMX2592_A[i] >> 8) & (0xFF);
+		tx_array[1] = (u8) (CaherLmx[freq_index].LMX2592_A[i] >> 16) & (0xFF);
+		Status = XIicPs_MasterSendPolled(&Iic, tx_array, 0x04, 0x2F);//I2C-SPI bridge slave address
+		while (XIicPs_BusIsBusy(&Iic))
+			;
+		usleep(25000);
+
+	}
+
+	for (i = 0; i < LMX2592_A_count; i++) {
+		tx_array[0] = 0x04;		//
+		tx_array[3] = (u8) (CaherLmx[freq_index].LMX2592_A[i]) & (0xFF);
+		tx_array[2] = (u8) (CaherLmx[freq_index].LMX2592_A[i] >> 8) & (0xFF);
+		tx_array[1] = (u8) (CaherLmx[freq_index].LMX2592_A[i] >> 16) & (0xFF);
+		Status = XIicPs_MasterSendPolled(&Iic, tx_array, 0x04, 0x2F);//I2C-SPI bridge slave address
+		while (XIicPs_BusIsBusy(&Iic))
+			;
+		usleep(25000);
+
+	}
+
+
+	tx_array[0]=0x01;
+	tx_array[3]=(u8) (0x00);
+	tx_array[2]=(u8) (0x00);
+	tx_array[1]=(u8) (0x02);
+	Status = XIicPs_MasterSendPolled(&Iic,tx_array,0x04,0x2F);//I2C-SPI bridge slave address
+	while (XIicPs_BusIsBusy(&Iic));
+	sleep(2);
+
+	tx_array[0]=0x01;
+		tx_array[3]=(u8) (0x00);
+		tx_array[2]=(u8) (0x00);
+		tx_array[1]=(u8) (0x00);
+		Status = XIicPs_MasterSendPolled(&Iic,tx_array,0x04,0x2F);//I2C-SPI bridge slave address
+		while (XIicPs_BusIsBusy(&Iic));
+		sleep(2);
+	for (i = 0; i < LMX2592_A_count; i++) {
+		tx_array[0] = 0x01;		//
+		tx_array[3] = (u8) (CaherLmx[freq_index].LMX2592_A[i]) & (0xFF);
+		tx_array[2] = (u8) (CaherLmx[freq_index].LMX2592_A[i] >> 8) & (0xFF);
+		tx_array[1] = (u8) (CaherLmx[freq_index].LMX2592_A[i] >> 16) & (0xFF);
+		Status = XIicPs_MasterSendPolled(&Iic, tx_array, 0x04, 0x2F);//I2C-SPI bridge slave address
+		while (XIicPs_BusIsBusy(&Iic))
+			;
+		usleep(25000);
+
+	}
+
+	for (i = 0; i < LMX2592_A_count; i++) {
+		tx_array[0] = 0x01;		//
+		tx_array[3] = (u8) (CaherLmx[freq_index].LMX2592_A[i]) & (0xFF);
+		tx_array[2] = (u8) (CaherLmx[freq_index].LMX2592_A[i]>> 8) & (0xFF);
+		tx_array[1] = (u8) (CaherLmx[freq_index].LMX2592_A[i]>> 16) & (0xFF);
+		Status = XIicPs_MasterSendPolled(&Iic, tx_array, 0x04, 0x2F);//I2C-SPI bridge slave address
+		while (XIicPs_BusIsBusy(&Iic))
+			;
+		usleep(25000);
+
+	}
+
+	xil_printf("I2c1 I2CTOSPI LMX2594 PLL configuration done\r\n");
+
+
+#else
+	int XIicDevFile;
+	char XIicDevFilename[20];
+
+	snprintf(XIicDevFilename, 20, "/dev/i2c/%d", XIicBus);
+	XIicDevFilename[19] = '\0';
+	XIicDevFile = open(XIicDevFilename, O_RDWR);
+
+	if (XIicDevFile < 0 && (errno == ENOENT || errno == ENOTDIR)) {
+		sprintf(XIicDevFilename, "/dev/i2c-%d", XIicBus);
+		XIicDevFile = open(XIicDevFilename, O_RDWR);
+	}
+
+	if (ioctl(XIicDevFile,  I2C_SLAVE_FORCE, 0x2f) < 0) {
+		fprintf(stderr,
+			"Error: Could not set address \n");
+		return ;
+	}
+
+	Lmk4028UpdateFreq( XIicDevFile);
+	Lmx2594UpdateFreq(XIicDevFile, XFrequency);
+#endif
+}
+#endif
diff --git a/xrfdc_caher_clk.h b/xrfdc_caher_clk.h
new file mode 100644
index 0000000..a4cbd75
--- /dev/null
+++ b/xrfdc_caher_clk.h
@@ -0,0 +1,39 @@
+/******************************************************************************
+ * *
+ * * Copyright (C) 2018 Xilinx, Inc.  All rights reserved.
+ * *
+ * * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * * of this software and associated documentation files (the "Software"), to deal
+ * * in the Software without restriction, including without limitation the rights
+ * * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * * copies of the Software, and to permit persons to whom the Software is
+ * * furnished to do so, subject to the following conditions:
+ * *
+ * * The above copyright notice and this permission notice shall be included in
+ * * all copies or substantial portions of the Software.
+ * *
+ * * Use of the Software is limited solely to applications:
+ * * (a) running on a Xilinx device, or
+ * * (b) that interact with a Xilinx device through a bus or interconnect.
+ * *
+ * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+ * * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
+ * * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * * SOFTWARE.
+ * *
+ * * Except as contained in this notice, the name of the Xilinx shall not be used
+ * * in advertising or otherwise to promote the sale, use or other dealings in
+ * * this Software without prior written authorization from Xilinx.
+ * *
+ * ******************************************************************************/
+#ifndef RFDC_H_
+#define RFDC_H_
+
+#ifdef XPS_BOARD_ZCU111
+void CaherClkApi(int XIicBus, int frequency);
+#endif
+
+#endif /* RFDC_H_ */
diff --git a/xrfdc_intr_example.c b/xrfdc_intr_example.c
index 5705307..117a370 100644
--- a/xrfdc_intr_example.c
+++ b/xrfdc_intr_example.c
@@ -210,6 +210,12 @@ int RFdcFabricRateExample(u16 RFdcDeviceId)
 	if (Status != XRFDC_SUCCESS) {
 		return XRFDC_FAILURE;
 	}
+
+#ifdef XPS_BOARD_ZCU111
+	printf("\n Configuring the Clock \r\n");
+	CaherClkApi(12, 1474560);
+#endif
+
 #ifndef __BAREMETAL__
 	ret = metal_device_open(BUS_NAME, RFDC_DEV_NAME, &device);
 	if (ret) {
diff --git a/xrfdc_read_write_example.c b/xrfdc_read_write_example.c
index 24f6c54..bb27fb6 100644
--- a/xrfdc_read_write_example.c
+++ b/xrfdc_read_write_example.c
@@ -222,6 +222,11 @@ int RFdcReadWriteExample(u16 RFdcDeviceId)
 		return XRFDC_FAILURE;
 	}
 
+#ifdef XPS_BOARD_ZCU111
+        printf("\n Configuring the Clock \r\n");
+        CaherClkApi(12, 1474560);
+#endif
+
 #ifndef __BAREMETAL__
 	ret = metal_device_open(BUS_NAME, RFDC_DEV_NAME, &device);
 	if (ret) {
diff --git a/xrfdc_selftest_example.c b/xrfdc_selftest_example.c
index dd2d5f4..5111062 100644
--- a/xrfdc_selftest_example.c
+++ b/xrfdc_selftest_example.c
@@ -179,6 +179,11 @@ int SelfTestExample(u16 RFdcDeviceId)
 		return XRFDC_FAILURE;
 	}
 
+#ifdef XPS_BOARD_ZCU111
+	printf("\n Configuring the Clock \r\n");
+	CaherClkApi(12, 1474560);
+#endif
+
 #ifndef __BAREMETAL__
 	ret = metal_device_open(BUS_NAME, RFDC_DEV_NAME, &device);
 	if (ret) {
-- 
2.7.4

